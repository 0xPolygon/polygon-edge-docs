(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{101:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),u=o,h=d["".concat(i,".").concat(u)]||d[u]||b[u]||a;return n?r.a.createElement(h,s(s({ref:t},c),{},{components:n})):r.a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var o=n(3),r=n(7),a=(n(0),n(101)),i={id:"howto-set-up-node",title:"How to set up a node locally"},s={unversionedId:"how-tos/howto-set-up-node",id:"how-tos/howto-set-up-node",isDocsHomePage:!1,title:"How to set up a node locally",description:"Useful information",source:"@site/docs/how-tos/howto-set-up-node.md",slug:"/how-tos/howto-set-up-node",permalink:"/docs/how-tos/howto-set-up-node",editUrl:"https://github.com/0xPolygon/polygon-sdk-docs/docs/how-tos/howto-set-up-node.md",version:"current"},l=[{value:"Useful information",id:"useful-information",children:[]},{value:"Step 1: Start 1 node",id:"step-1-start-1-node",children:[]},{value:"Step 2: Start the 2nd node",id:"step-2-start-the-2nd-node",children:[]},{value:"Step 3: Monitor events",id:"step-3-monitor-events",children:[]}],c={toc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"useful-information"},"Useful information"),Object(a.b)("p",null,"For a better understanding of some commands that will be used later on, it is recommended that you go over\nthe ",Object(a.b)("a",{parentName:"p",href:"/docs/cli-commands"},"CLI Commands"),", before diving deeper into the examples below."),Object(a.b)("p",null,"The main Polygon SDK version is located on the ",Object(a.b)("strong",{parentName:"p"},"develop")," branch, and is considered to be a stable version of the SDK,\nwhile other branches are mid-feature implementations."),Object(a.b)("p",null,"The technologies mentioned in the examples are covered in their corresponding modules in the documentation."),Object(a.b)("p",null,"The how-to guides assume you have a working installation of Golang running on your machine, with Go added to the $PATH variable."),Object(a.b)("p",null,"This example will go over the basics of starting a node, and demonstrate how the nodes interact between each other."),Object(a.b)("h2",{id:"step-1-start-1-node"},"Step 1: Start 1 node"),Object(a.b)("p",null,"The following command will start 1 node:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"go run main.go server --data-dir ./test-chain-1 --grpc :10000 --libp2p :10001 --jsonrpc :10002 --seal\n")),Object(a.b)("p",null,"To briefly go over what has been done so far:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"The directory for the client data has been specified to be ./test-chain-1"),Object(a.b)("li",{parentName:"ul"},"The GRPC server has been started on port ",Object(a.b)("strong",{parentName:"li"},"10000")),Object(a.b)("li",{parentName:"ul"},"The libp2p server has been started on port ",Object(a.b)("strong",{parentName:"li"},"10001")),Object(a.b)("li",{parentName:"ul"},"The JSON-RPC server has been started on port ",Object(a.b)("strong",{parentName:"li"},"10002")),Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)("em",{parentName:"li"},"seal")," flag means that the node being started is going to participate in block sealing")),Object(a.b)("p",null,"By default, the client uses an empty genesis file with a ~5s PoW. The structure of the genesis file is covered in\nthe ",Object(a.b)("a",{parentName:"p",href:"/docs/cli-commands"},"CLI Commands")," section."),Object(a.b)("p",null,"After running the previous command, in the logs of the running client you will see the ",Object(a.b)("strong",{parentName:"p"},"libP2P")," address required to\nconnect to this node. This should be an address in the following form:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"/ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n")),Object(a.b)("h2",{id:"step-2-start-the-2nd-node"},"Step 2: Start the 2nd node"),Object(a.b)("p",null,"The next step would be to start a second node, also locally, and connect it to the first:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"go run main.go server --data-dir ./test-chain-2 --grpc :20000 --libp2p :20001 --jsonrpc :20002 --seal --join <node-1-libp2p-addr>\n")),Object(a.b)("p",null,"The meaning of the commands are the same as in the previous execution, the only thing that is notable is the ",Object(a.b)("strong",{parentName:"p"},"join"),"\nflag, which specifies the previously started node as a peer."),Object(a.b)("h2",{id:"step-3-monitor-events"},"Step 3: Monitor events"),Object(a.b)("p",null,"To monitor blockchain events(i.e forks, reorgs...) from node 2, the following command is used:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"go run main.go monitor --address localhost:20000\n")))}p.isMDXComponent=!0}}]);