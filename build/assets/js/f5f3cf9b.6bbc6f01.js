(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{101:function(e,t,n){"use strict";n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),b=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=b(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),h=b(n),u=r,d=h["".concat(c,".").concat(u)]||h[u]||p[u]||o;return n?a.a.createElement(d,i(i({ref:t},l),{},{components:n})):a.a.createElement(d,i({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},97:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return b}));var r=n(3),a=n(7),o=(n(0),n(101)),c={id:"blockchain",title:"Blockchain"},i={unversionedId:"reference/modules/blockchain",id:"reference/modules/blockchain",isDocsHomePage:!1,title:"Blockchain",description:"Overview",source:"@site/docs/reference/modules/blockchain.md",slug:"/reference/modules/blockchain",permalink:"/docs/reference/modules/blockchain",editUrl:"https://github.com/0xPolygon/polygon-sdk-docs/docs/reference/modules/blockchain.md",version:"current",sidebar:"develop",previous:{title:"Architecture Overview",permalink:"/docs/reference/architecture"},next:{title:"Minimal",permalink:"/docs/reference/modules/minimal"}},s=[{value:"Overview",id:"overview",children:[]},{value:"<em>WriteBlocks</em>",id:"writeblocks",children:[]},{value:"Blockchain Subscriptions",id:"blockchain-subscriptions",children:[]}],l={toc:s};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"overview"},"Overview"),Object(o.b)("p",null,"One of the main modules of the Polygon SDK are ",Object(o.b)("strong",{parentName:"p"},"Blockchain")," and ",Object(o.b)("strong",{parentName:"p"},"State"),". ",Object(o.b)("br",null)),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Blockchain")," is the powerhouse that deals with block reorganizations. This means that it deals with all the logic that happens when a new block is included into the blockchain."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"State")," represents the ",Object(o.b)("em",{parentName:"p"},"state transition")," object. It deals with how the state changes when a new block is included. ",Object(o.b)("br",null)," Among other things, ",Object(o.b)("strong",{parentName:"p"},"State")," handles:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Executing transactions"),Object(o.b)("li",{parentName:"ul"},"Executing the EVM"),Object(o.b)("li",{parentName:"ul"},"Changing the Merkle tries"),Object(o.b)("li",{parentName:"ul"},"Much more, which is covered in the corresponding ",Object(o.b)("strong",{parentName:"li"},"State")," section \ud83d\ude42")),Object(o.b)("p",null,"The key takeaway is that these 2 parts are very connected, and they work closely together in order for the client to function. ",Object(o.b)("br",null)," For example, when the ",Object(o.b)("strong",{parentName:"p"},"Blockchain")," layer receives a new block (and no reorganization occurred), it calls the ",Object(o.b)("strong",{parentName:"p"},"State")," to perform a state transition."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Blockchain")," also has to deal with some parts relating to consensus (ex. ",Object(o.b)("em",{parentName:"p"},"is this ethHash correct?"),", ",Object(o.b)("em",{parentName:"p"},"is this PoW correct?"),"). ",Object(o.b)("br",null)," In one sentence, ",Object(o.b)("strong",{parentName:"p"},"it is the main core of logic through which all blocks are included"),"."),Object(o.b)("h2",{id:"writeblocks"},Object(o.b)("em",{parentName:"h2"},"WriteBlocks")),Object(o.b)("p",null,"One of the most important parts relating to the ",Object(o.b)("strong",{parentName:"p"},"Blockchain")," layer is the ",Object(o.b)("em",{parentName:"p"},"WriteBlocks")," method:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-go",metastring:'title="blockchain/blockchain.go"',title:'"blockchain/blockchain.go"'},'// WriteBlocks writes a batch of blocks\nfunc (b *Blockchain) WriteBlocks(blocks []*types.Block) error {\n    if len(blocks) == 0 {\n        return fmt.Errorf("no headers found to insert")\n    }\n\n    parent, ok := b.readHeader(blocks[0].ParentHash())\n    if !ok {\n        return fmt.Errorf("parent of %s (%d) not found: %s", blocks[0].Hash().String(), blocks[0].Number(), blocks[0].ParentHash())\n    }\n\n    // validate chain\n    for i := 0; i < len(blocks); i++ {\n        block := blocks[i]\n\n        if blocks[i].Number()-1 != parent.Number {\n            return fmt.Errorf("number sequence not correct at %d, %d and %d", i, blocks[i].Number(), parent.Number)\n        }\n        if blocks[i].ParentHash() != parent.Hash {\n            return fmt.Errorf("parent hash not correct")\n        }\n        if err := b.consensus.VerifyHeader(parent, blocks[i].Header, false, true); err != nil {\n            return fmt.Errorf("failed to verify the header: %v", err)\n        }\n\n        // verify body data\n        if hash := buildroot.CalculateUncleRoot(block.Uncles); hash != blocks[i].Header.Sha3Uncles {\n            return fmt.Errorf("uncle root hash mismatch: have %s, want %s", hash, blocks[i].Header.Sha3Uncles)\n        }\n        \n        if hash := buildroot.CalculateTransactionsRoot(block.Transactions); hash != blocks[i].Header.TxRoot {\n            return fmt.Errorf("transaction root hash mismatch: have %s, want %s", hash, blocks[i].Header.TxRoot)\n        }\n        parent = blocks[i].Header\n    }\n\n    // Write chain\n    for indx, block := range blocks {\n        header := block.Header\n\n        body := block.Body()\n        if err := b.db.WriteBody(block.Header.Hash, block.Body()); err != nil {\n            return err\n        }\n        b.bodiesCache.Add(block.Header.Hash, body)\n\n        // Verify uncles. It requires to have the bodies on memory\n        if err := b.VerifyUncles(block); err != nil {\n            return err\n        }\n        // Process and validate the block\n        if err := b.processBlock(blocks[indx]); err != nil {\n            return err\n        }\n\n        // Write the header to the chain\n        evnt := &Event{}\n        if err := b.writeHeaderImpl(evnt, header); err != nil {\n            return err\n        }\n        b.dispatchEvent(evnt)\n\n        // Update the average gas price\n        b.UpdateGasPriceAvg(new(big.Int).SetUint64(header.GasUsed))\n    }\n\n    return nil\n}\n')),Object(o.b)("p",null,"The ",Object(o.b)("em",{parentName:"p"},"WriteBlocks")," method is the entry point to write blocks into the blockchain. As a parameter, it takes in a range of blocks.",Object(o.b)("br",null),"\nFirstly, the blocks are validated. After that, they are written to the chain."),Object(o.b)("p",null,"The actual ",Object(o.b)("em",{parentName:"p"},"state transition")," is performed by calling the ",Object(o.b)("em",{parentName:"p"},"processBlock")," method within ",Object(o.b)("em",{parentName:"p"},"WriteBlocks"),"."),Object(o.b)("p",null,"It is worth mentioning that, because it is the entry point for writing blocks to the blockchain, other modules (such as the ",Object(o.b)("strong",{parentName:"p"},"Sealer"),") utilize this method."),Object(o.b)("h2",{id:"blockchain-subscriptions"},"Blockchain Subscriptions"),Object(o.b)("p",null,"There needs to be a way to monitor blockchain related changes. ",Object(o.b)("br",null),"\nThis is where ",Object(o.b)("strong",{parentName:"p"},"Subscriptions")," come in. "),Object(o.b)("p",null,"Subscriptions are a way to tap into blockchain event streams, and instantly receive meaningful data."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-go",metastring:'title="blockchain/subscription.go"',title:'"blockchain/subscription.go"'},"type Subscription interface {\n    // Returns a Blockchain Event channel\n    GetEventCh() chan *Event\n    \n    // Returns the latest event (blocking)\n    GetEvent() *Event\n    \n    // Closes the subscription\n    Close()\n}\n")),Object(o.b)("p",null,"The ",Object(o.b)("strong",{parentName:"p"},"Blockchain Events")," contain information regarding any changes made to the actual chain. This includes reorganizations, as well as new blocks:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-go",metastring:'title="blockchain/subscription.go"',title:'"blockchain/subscription.go"'},"type Event struct {\n    // Old chain removed if there was a reorg\n    OldChain []*types.Header\n\n    // New part of the chain (or a fork)\n    NewChain []*types.Header\n\n    // Difficulty is the new difficulty created with this event\n    Difficulty *big.Int\n\n    // Type is the type of event\n    Type EventType\n\n    // Source is the source that generated the blocks for the event\n    // right now it can be either the Sealer or the Syncer. TODO\n    Source string\n}\n")),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Refresher")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Do you remember when we mentioned the ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"monitor"))," command in the ",Object(o.b)("a",{parentName:"p",href:"/docs/cli-commands"},"CLI Commands"),"?"),Object(o.b)("p",{parentName:"div"},"The Blockchain Events are the original events that happen in Polygon SDK, and they're later mapped to a Protocol Buffers message format for easy transfer."))))}b.isMDXComponent=!0}}]);