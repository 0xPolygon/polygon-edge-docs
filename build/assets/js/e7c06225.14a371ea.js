(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{105:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return i}));var a=n(3),r=n(7),o=(n(0),n(112)),l={id:"cli-commands",title:"CLI Commands"},c={unversionedId:"reference/cli-commands",id:"reference/cli-commands",isDocsHomePage:!1,title:"CLI Commands",description:"This section details the present commands, command flags in the Polygon SDK, and how they're used.",source:"@site/docs/reference/cli-commands.md",slug:"/reference/cli-commands",permalink:"/docs/reference/cli-commands",editUrl:"https://github.com/0xPolygon/polygon-sdk-docs/docs/reference/cli-commands.md",version:"current",sidebar:"reference",previous:{title:"Architecture",permalink:"/docs/reference/polygon-sdk-architecture"},next:{title:"Blockchain",permalink:"/docs/reference/modules/blockchain"}},s=[{value:"\ud83d\ude80 Startup Commands",id:"-startup-commands",children:[]},{value:"\ud83d\udc77 Operator Commands",id:"-operator-commands",children:[{value:"Peer Commands",id:"peer-commands",children:[]},{value:"IBFT Commands",id:"ibft-commands",children:[]},{value:"Transaction Pool Commands",id:"transaction-pool-commands",children:[]},{value:"Blockchain commands",id:"blockchain-commands",children:[]}]},{value:"Responses",id:"responses",children:[{value:"Status Response",id:"status-response",children:[]},{value:"Monitor Response",id:"monitor-response",children:[]}]},{value:"Genesis Template",id:"genesis-template",children:[{value:"Data Directory",id:"data-directory",children:[]}]},{value:"\ud83d\udcdc Resources",id:"-resources",children:[]}],b={toc:s};function i(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This section details the present commands, command flags in the Polygon SDK, and how they're used."),Object(o.b)("h2",{id:"-startup-commands"},"\ud83d\ude80 Startup Commands"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"th"},"Command")),Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"th"},"Description")))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"server"),Object(o.b)("td",{parentName:"tr",align:null},"The default command that starts the blockchain client, by bootstrapping all modules together")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"dev"),Object(o.b)("td",{parentName:"tr",align:null},'"Bypasses" consensus and networking and starts a blockchain locally. It starts a local node and mines every transaction in a separate block')),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"genesis"),Object(o.b)("td",{parentName:"tr",align:null},"Generates a ",Object(o.b)("em",{parentName:"td"},"genesis.json")," file, which is used to set predefined chain state before starting the client. The structure of the genesis file is described below")))),Object(o.b)("h2",{id:"-operator-commands"},"\ud83d\udc77 Operator Commands"),Object(o.b)("h3",{id:"peer-commands"},"Peer Commands"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"th"},"Command")),Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"th"},"Description")))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"peers add <",Object(o.b)("em",{parentName:"td"},"address"),">"),Object(o.b)("td",{parentName:"tr",align:null},"Adds a new peer using their libp2p address")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"peers list"),Object(o.b)("td",{parentName:"tr",align:null},"Lists all the peers the client is connected to through libp2p")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"peers status <",Object(o.b)("em",{parentName:"td"},"address"),">"),Object(o.b)("td",{parentName:"tr",align:null},"Returns the status of a specific peer from the peers list, using the libp2p address")))),Object(o.b)("h3",{id:"ibft-commands"},"IBFT Commands"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"th"},"Command")),Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"th"},"Description")))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"ibft init <",Object(o.b)("em",{parentName:"td"},"data-dir"),">"),Object(o.b)("td",{parentName:"tr",align:null},"Initializes IBFT for the Polygon SDK")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"ibft snapshot"),Object(o.b)("td",{parentName:"tr",align:null},"Returns the IBFT snapshot")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"ibft candidates"),Object(o.b)("td",{parentName:"tr",align:null},"Queries the current set of proposed candidates, as well as candidates that have not been included yet")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"ibft propose --add <",Object(o.b)("em",{parentName:"td"},"eth-address"),">"),Object(o.b)("td",{parentName:"tr",align:null},"Proposes a new candidate to be added to the snapshot list")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"ibft propose --remove <",Object(o.b)("em",{parentName:"td"},"eth-address"),">"),Object(o.b)("td",{parentName:"tr",align:null},"Proposes a new candidate to be removed from the snapshot list")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"ibft status"),Object(o.b)("td",{parentName:"tr",align:null},"Returns the overall status of the IBFT client")))),Object(o.b)("h3",{id:"transaction-pool-commands"},"Transaction Pool Commands"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"th"},"Command")),Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"th"},"Description")))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"txpool add"),Object(o.b)("td",{parentName:"tr",align:null},"Adds a transaction to the transaction pool, using different flags")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"txpool status"),Object(o.b)("td",{parentName:"tr",align:null},"Returns the number of transactions in the pool")))),Object(o.b)("h3",{id:"blockchain-commands"},"Blockchain commands"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"th"},"Command")),Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"th"},"Description")))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"status"),Object(o.b)("td",{parentName:"tr",align:null},"Returns the status of the client. The detailed response can be found below")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"monitor"),Object(o.b)("td",{parentName:"tr",align:null},"Subscribes to a blockchain event stream. The detailed response can be found below")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"version"),Object(o.b)("td",{parentName:"tr",align:null},"Returns the current version of the client")))),Object(o.b)("h2",{id:"responses"},"Responses"),Object(o.b)("h3",{id:"status-response"},"Status Response"),Object(o.b)("p",null,"The response object is defined using Protocol Buffers."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-go",metastring:'title="minimal/proto/system.proto"',title:'"minimal/proto/system.proto"'},"message ServerStatus {\n    int64 network = 1;\n    \n    string genesis = 2;\n\n    Block current = 3;\n\n    string p2pAddr = 4;\n    \n    message Block {\n        int64 number = 1;\n        string hash = 2;\n    }\n}\n")),Object(o.b)("h3",{id:"monitor-response"},"Monitor Response"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-go",metastring:'title="minimal/proto/system.proto"',title:'"minimal/proto/system.proto"'},'message BlockchainEvent {\n    // The "repeated" keyword indicates an array\n    repeated Header added = 1;\n    repeated Header removed = 2;\n\n    message Header {\n        int64 number = 1;\n        string hash = 2;\n    }\n}\n')),Object(o.b)("h2",{id:"genesis-template"},"Genesis Template"),Object(o.b)("p",null,"The genesis file should be used to set the initial state of the blockchain (ex. if some accounts should have a starting balance)."),Object(o.b)("p",null,"The following ",Object(o.b)("em",{parentName:"p"},"./genesis.json")," file is generated:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "example",\n    "genesis": {\n        "nonce": "0x0000000000000000",\n        "gasLimit": "0x0000000000001388",\n        "difficulty": "0x0000000000000001",\n        "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",\n        "coinbase": "0x0000000000000000000000000000000000000000",\n        "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000"\n    },\n    "params": {\n        "forks": {},\n        "chainID": 100,\n        "engine": {\n            "pow": {}\n        }\n    },\n    "bootnodes": []\n}\n')),Object(o.b)("h3",{id:"data-directory"},"Data Directory"),Object(o.b)("p",null,"When executing the ",Object(o.b)("em",{parentName:"p"},"data-dir")," flag, a ",Object(o.b)("strong",{parentName:"p"},"test-chain")," folder is generated.\nThe folder structure consists of the following sub-folders:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"blockchain")," - Stores the LevelDB for blockchain objects"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"trie")," - Stores the LevelDB for the Merkle tries"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"keystore")," - Stores private keys for the client. This includes the libp2p private key, and the sealing / validator private key"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"consensus")," - Stores any consensus information that the client might need while working")),Object(o.b)("h2",{id:"-resources"},"\ud83d\udcdc Resources"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("a",{parentName:"strong",href:"https://developers.google.com/protocol-buffers"},"Protocol Buffers")))))}i.isMDXComponent=!0},112:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),i=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=i(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,b=s(e,["components","mdxType","originalType","parentName"]),d=i(n),p=a,u=d["".concat(l,".").concat(p)]||d[p]||m[p]||o;return n?r.a.createElement(u,c(c({ref:t},b),{},{components:n})):r.a.createElement(u,c({ref:t},b))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var b=2;b<o;b++)l[b]=n[b];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);