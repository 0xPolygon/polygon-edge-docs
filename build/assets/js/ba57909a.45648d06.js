(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{100:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(c,".").concat(d)]||u[d]||b[d]||o;return n?a.a.createElement(h,i(i({ref:t},l),{},{components:n})):a.a.createElement(h,i({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},92:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),o=(n(0),n(100)),c={id:"howto-query-json-rpc",title:"How to query JSON RPC endpoints"},i={unversionedId:"how-tos/howto-query-json-rpc",id:"how-tos/howto-query-json-rpc",isDocsHomePage:!1,title:"How to query JSON RPC endpoints",description:"Overview",source:"@site/docs/how-tos/howto-query-json-rpc.md",slug:"/how-tos/howto-query-json-rpc",permalink:"/docs/how-tos/howto-query-json-rpc",editUrl:"https://github.com/0xPolygon/polygon-sdk-docs/docs/how-tos/howto-query-json-rpc.md",version:"current",sidebar:"develop",previous:{title:"How to query operator information",permalink:"/docs/how-tos/howto-query-operator"},next:{title:"How to report an issue",permalink:"/docs/how-tos/howto-report-bug"}},s=[{value:"Overview",id:"overview",children:[]},{value:"Step 1: Create a genesis file with a premined account",id:"step-1-create-a-genesis-file-with-a-premined-account",children:[]},{value:"Step 2: Start the Polygon SDK in dev mode",id:"step-2-start-the-polygon-sdk-in-dev-mode",children:[]},{value:"Step 3: Query the account balance",id:"step-3-query-the-account-balance",children:[]},{value:"Step 4: Send a transfer transaction",id:"step-4-send-a-transfer-transaction",children:[]}],l={toc:s};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"overview"},"Overview"),Object(o.b)("p",null,"The JSON-RPC layer of the Polygon SDK provides developers with the functionality of easily interacting with the blockchain,\nthrough HTTP requests."),Object(o.b)("p",null,"This example covers using tools like ",Object(o.b)("strong",{parentName:"p"},"curl")," to query information, as well as starting the chain with a premined account,\nand sending a transaction."),Object(o.b)("h2",{id:"step-1-create-a-genesis-file-with-a-premined-account"},"Step 1: Create a genesis file with a premined account"),Object(o.b)("p",null,"To generate a genesis file, run the following command:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"go run main.go genesis --premine 0x1010101010101010101010101010101010101010\n")),Object(o.b)("p",null,"The ",Object(o.b)("strong",{parentName:"p"},"premine")," flag sets the address that should be included with a starting balance in the ",Object(o.b)("strong",{parentName:"p"},"genesis")," file.",Object(o.b)("br",null),"\nIn this case, the address ",Object(o.b)("inlineCode",{parentName:"p"},"0x1010101010101010101010101010101010101010")," will have a starting ",Object(o.b)("strong",{parentName:"p"},"default balance")," of\n",Object(o.b)("inlineCode",{parentName:"p"},"0x100000000000000000000000000"),"."),Object(o.b)("p",null,"If we wanted to specify a balance, we can separate out the balance and address with a ",Object(o.b)("inlineCode",{parentName:"p"},":"),", like so:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"go run main.go genesis --premine 0x1010101010101010101010101010101010101010:0x123123\n")),Object(o.b)("p",null,"The balance can be either a ",Object(o.b)("inlineCode",{parentName:"p"},"hex")," or ",Object(o.b)("inlineCode",{parentName:"p"},"uint256")," value."),Object(o.b)("h2",{id:"step-2-start-the-polygon-sdk-in-dev-mode"},"Step 2: Start the Polygon SDK in dev mode"),Object(o.b)("p",null,"To start the SDK in development mode, which is explained in the ",Object(o.b)("a",{parentName:"p",href:"/docs/cli-commands"},"CLI Commands")," section,\nrun the following: "),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"go run main.go server --chain genesis.json --dev --log-level debug\n")),Object(o.b)("h2",{id:"step-3-query-the-account-balance"},"Step 3: Query the account balance"),Object(o.b)("p",null,"Now that the client is up and running in dev mode, using the genesis file generated in ",Object(o.b)("strong",{parentName:"p"},"step 1"),", we can use a tool like\n",Object(o.b)("strong",{parentName:"p"},"curl")," to query the account balance:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},'curl -X POST --data \'{"jsonrpc":"2.0","method":"eth_getBalance","params":["0x1010101010101010101010101010101010101010", "latest"],"id":1}\' localhost:8545\n')),Object(o.b)("p",null,"The command should return the following output:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},'{\n  "id":1,\n  "result":"0x100000000000000000000000000"\n}\n')),Object(o.b)("h2",{id:"step-4-send-a-transfer-transaction"},"Step 4: Send a transfer transaction"),Object(o.b)("p",null,"Now that we've confirmed the account we set up as premined has the correct balance, we can transfer some ether:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"go run main.go txpool add --nonce 0 --from 0x1010101010101010101010101010101010101010 --to 0x0000000000000000000000000000000000000010 --value 0x100\n")),Object(o.b)("p",null,"The ",Object(o.b)("strong",{parentName:"p"},"txpool add")," command adds the transaction to the transaction pool."),Object(o.b)("p",null,"In this case, the transfer is from ",Object(o.b)("inlineCode",{parentName:"p"},"0x1010101010101010101010101010101010101010")," to ",Object(o.b)("inlineCode",{parentName:"p"},"0x0000000000000000000000000000000000000010"),", with the value being ",Object(o.b)("inlineCode",{parentName:"p"},"0x100")," wei."))}p.isMDXComponent=!0}}]);