(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{112:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return d}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),p=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},b=function(e){var n=p(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},h=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(t),h=r,d=b["".concat(i,".").concat(h)]||b[h]||u[h]||o;return t?a.a.createElement(d,c(c({ref:n},l),{},{components:t})):a.a.createElement(d,c({ref:n},l))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=h;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},93:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return p}));var r=t(3),a=t(7),o=(t(0),t(112)),i={id:"json-rpc",title:"JSON RPC"},c={unversionedId:"reference/modules/json-rpc",id:"reference/modules/json-rpc",isDocsHomePage:!1,title:"JSON RPC",description:"Overview",source:"@site/docs/reference/modules/json-rpc.md",slug:"/reference/modules/json-rpc",permalink:"/docs/reference/modules/json-rpc",editUrl:"https://github.com/0xPolygon/polygon-sdk-docs/docs/reference/modules/json-rpc.md",version:"current",sidebar:"reference",previous:{title:"TxPool",permalink:"/docs/reference/modules/txpool"},next:{title:"Consensus",permalink:"/docs/reference/modules/consensus"}},s=[{value:"Overview",id:"overview",children:[]},{value:"Blockchain Interface",id:"blockchain-interface",children:[]},{value:"ETH Endpoints",id:"eth-endpoints",children:[]},{value:"Filter Manager",id:"filter-manager",children:[]},{value:"\ud83d\udcdc Resources",id:"-resources",children:[]}],l={toc:s};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"overview"},"Overview"),Object(o.b)("p",null,"The ",Object(o.b)("strong",{parentName:"p"},"JSON RPC")," module implements the ",Object(o.b)("strong",{parentName:"p"},"JSON RPC API layer"),", something that dApp developers use to interact with the\nblockchain."),Object(o.b)("p",null,"It includes support for standard ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"https://eth.wiki/json-rpc/API"},"json-rpc endpoints")),", as well as websocket\nendpoints."),Object(o.b)("h2",{id:"blockchain-interface"},"Blockchain Interface"),Object(o.b)("p",null,"The Polygon SDK uses the ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("em",{parentName:"strong"},"blockchain interface"))," to define all the methods that the JSON RPC module needs to use, in\norder to deliver its endpoints."),Object(o.b)("p",null,"The blockchain interface is implemented by the ",Object(o.b)("strong",{parentName:"p"},Object(o.b)("a",{parentName:"strong",href:"docs/reference/modules/minimal"},"Minimal"))," server. It is the base implementation\nthat's passed into the JSON RPC layer."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-go",metastring:'title="jsonrpc/blockchain.go"',title:'"jsonrpc/blockchain.go"'},"type blockchainInterface interface {\n    // Header returns the current header of the chain (genesis if empty)\n    Header() *types.Header\n\n    // GetReceiptsByHash returns the receipts for a hash\n    GetReceiptsByHash(hash types.Hash) ([]*types.Receipt, error)\n\n    // Subscribe subscribes for chain head events\n    SubscribeEvents() blockchain.Subscription\n\n    // GetHeaderByNumber returns the header by number\n    GetHeaderByNumber(block uint64) (*types.Header, bool)\n\n    // GetAvgGasPrice returns the average gas price\n    GetAvgGasPrice() *big.Int\n\n    // AddTx adds a new transaction to the tx pool\n    AddTx(tx *types.Transaction) error\n\n    // State returns a reference to the state\n    State() state.State\n\n    // BeginTxn starts a transition object\n    BeginTxn(parentRoot types.Hash, header *types.Header) (*state.Transition, error)\n\n    // GetBlockByHash gets a block using the provided hash\n    GetBlockByHash(hash types.Hash, full bool) (*types.Block, bool)\n\n    // ApplyTxn applies a transaction object to the blockchain\n    ApplyTxn(header *types.Header, txn *types.Transaction) ([]byte, bool, error)\n\n    stateHelperInterface\n}\n")),Object(o.b)("h2",{id:"eth-endpoints"},"ETH Endpoints"),Object(o.b)("p",null,"All the standard JSON RPC endpoints are implemented in:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"jsonrpc/eth_endpoint.go\n")),Object(o.b)("h2",{id:"filter-manager"},"Filter Manager"),Object(o.b)("p",null,"The ",Object(o.b)("strong",{parentName:"p"},"Filter Manager")," is a service that runs alongside the JSON RPC server."),Object(o.b)("p",null,"It provides support for filtering blocks on the blockchain.",Object(o.b)("br",null),"\nSpecifically, it includes both a ",Object(o.b)("strong",{parentName:"p"},"log")," and a ",Object(o.b)("strong",{parentName:"p"},"block")," level filter."),Object(o.b)("p",null,"The Filter Manager relies heavily on Subscription Events, mentioned in\nthe ",Object(o.b)("a",{parentName:"p",href:"blockchain#blockchain-subscriptions"},"Blockchain")," section"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-go",metastring:'title="jsonrpc/filter_manager.go"',title:'"jsonrpc/filter_manager.go"'},"type Filter struct {\n    id string\n\n    // block filter\n    block *headElem\n\n    // log cache\n    logs []*Log\n\n    // log filter\n    logFilter *LogFilter\n\n    // index of the filter in the timer array\n    index int\n\n    // next time to timeout\n    timestamp time.Time\n\n    // websocket connection\n    ws wsConn\n}\n\n\ntype FilterManager struct {\n    logger hclog.Logger\n\n    store   blockchainInterface\n    closeCh chan struct{}\n\n    subscription blockchain.Subscription\n\n    filters map[string]*Filter\n    lock    sync.Mutex\n\n    updateCh chan struct{}\n    timer    timeHeapImpl\n    timeout  time.Duration\n\n    blockStream *blockStream\n}\n\n")),Object(o.b)("p",null,"Filter Manager events get dispatched in the ",Object(o.b)("em",{parentName:"p"},"Run")," method:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-go",metastring:'title="jsonrpc/filter_manager.go"',title:'"jsonrpc/filter_manager.go"'},'func (f *FilterManager) Run() {\n\n    // watch for new events in the blockchain\n    watchCh := make(chan *blockchain.Event)\n    go func() {\n        for {\n            evnt := f.subscription.GetEvent()\n            if evnt == nil {\n                return\n            }\n            watchCh <- evnt\n        }\n    }()\n\n    var timeoutCh <-chan time.Time\n    for {\n        // check for the next filter to be removed\n        filter := f.nextTimeoutFilter()\n        if filter == nil {\n            timeoutCh = nil\n        } else {\n            timeoutCh = time.After(filter.timestamp.Sub(time.Now()))\n        }\n\n        select {\n        case evnt := <-watchCh:\n            // new blockchain event\n            if err := f.dispatchEvent(evnt); err != nil {\n                f.logger.Error("failed to dispatch event", "err", err)\n            }\n\n        case <-timeoutCh:\n            // timeout for filter\n            if !f.Uninstall(filter.id) {\n                f.logger.Error("failed to uninstall filter", "id", filter.id)\n            }\n\n        case <-f.updateCh:\n            // there is a new filter, reset the loop to start the timeout timer\n\n        case <-f.closeCh:\n            // stop the filter manager\n            return\n        }\n    }\n}\n')),Object(o.b)("h2",{id:"-resources"},"\ud83d\udcdc Resources"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("a",{parentName:"strong",href:"https://eth.wiki/json-rpc/API"},"Ethereum JSON-RPC")))))}p.isMDXComponent=!0}}]);