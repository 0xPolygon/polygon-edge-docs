(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{90:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return a})),r.d(n,"metadata",(function(){return c})),r.d(n,"toc",(function(){return l})),r.d(n,"default",(function(){return u}));var t=r(3),i=r(7),o=(r(0),r(96)),a={id:"minimal",title:"Minimal"},c={unversionedId:"modules/minimal",id:"modules/minimal",isDocsHomePage:!1,title:"Minimal",description:"Overview",source:"@site/docs/modules/minimal.md",slug:"/modules/minimal",permalink:"/docs/modules/minimal",editUrl:"https://github.com/0xPolygon/polygon-sdk-docs/docs/modules/minimal.md",version:"current",sidebar:"modules",previous:{title:"Blockchain",permalink:"/docs/modules/blockchain"},next:{title:"Networking",permalink:"/docs/modules/networking"}},l=[{value:"Overview",id:"overview",children:[]},{value:"Startup Magic",id:"startup-magic",children:[]}],s={toc:l};function u(e){var n=e.components,r=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},s,r,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"overview"},"Overview"),Object(o.b)("p",null,"As mentioned before, Polygon SDK is a set of different modules, all connected to each other.",Object(o.b)("br",null),"\nThe ",Object(o.b)("strong",{parentName:"p"},"Blockchain")," is connected to the ",Object(o.b)("strong",{parentName:"p"},"State"),", or for example ",Object(o.b)("strong",{parentName:"p"},"Synchronization"),", which pipes new blocks into the ",Object(o.b)("strong",{parentName:"p"},"Blockchain"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Minimal")," is the cornerstone for these inter-connected modules. ",Object(o.b)("br",null),"\nIt acts as a central hub for all the services that run on the Polygon SDK."),Object(o.b)("h2",{id:"startup-magic"},"Startup Magic"),Object(o.b)("p",null,"Among other things, Minimal is responsible for:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Setting up data directories"),Object(o.b)("li",{parentName:"ul"},"Creating a keystore for libp2p communication"),Object(o.b)("li",{parentName:"ul"},"Creating storage"),Object(o.b)("li",{parentName:"ul"},"Setting up consensus"),Object(o.b)("li",{parentName:"ul"},"Setting up the blockchain object with GRPC, JSON RPC and Synchronization")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-go",metastring:'title="minimal/server.go"',title:'"minimal/server.go"'},'func NewServer(logger hclog.Logger, config *Config) (*Server, error) {\n    m := &Server{\n        logger: logger,\n        config: config,\n        chain:      config.Chain,\n        grpcServer: grpc.NewServer(),\n    }\n\n    m.logger.Info("Data dir", "path", config.DataDir)\n\n    // Generate all the paths in the dataDir\n    if err := setupDataDir(config.DataDir, dirPaths); err != nil {\n        return nil, fmt.Errorf("failed to create data directories: %v", err)\n    }\n\n    // Get the private key for the node\n    keystore := keystore.NewLocalKeystore(filepath.Join(config.DataDir, "keystore"))\n    key, err := keystore.Get()\n    if err != nil {\n        return nil, fmt.Errorf("failed to read private key: %v", err)\n    }\n    m.key = key\n\n    storage, err := leveldb.NewLevelDBStorage(filepath.Join(config.DataDir, "blockchain"), logger)\n    if err != nil {\n        return nil, err\n    }\n    m.storage = storage\n\n    // Setup consensus\n    if err := m.setupConsensus(); err != nil {\n        return nil, err\n    }\n\n    stateStorage, err := itrie.NewLevelDBStorage(filepath.Join(m.config.DataDir, "trie"), logger)\n    if err != nil {\n        return nil, err\n    }\n\n    st := itrie.NewState(stateStorage)\n    m.state = st\n\n    executor := state.NewExecutor(config.Chain.Params, st)\n    executor.SetRuntime(precompiled.NewPrecompiled())\n    executor.SetRuntime(evm.NewEVM())\n\n    // Blockchain object\n    m.blockchain, err = blockchain.NewBlockchain(logger, storage, config.Chain, m.consensus, executor)\n    if err != nil {\n        return nil, err\n    }\n\n    executor.GetHash = m.blockchain.GetHashHelper\n\n    // Setup sealer\n    sealerConfig := &sealer.Config{\n        Coinbase: crypto.PubKeyToAddress(&m.key.PublicKey),\n    }\n    m.Sealer = sealer.NewSealer(sealerConfig, logger, m.blockchain, m.consensus, executor)\n    m.Sealer.SetEnabled(m.config.Seal)\n\n    // Setup the libp2p server\n    if err := m.setupLibP2P(); err != nil {\n        return nil, err\n    }\n\n    // Setup the GRPC server\n    if err := m.setupGRPC(); err != nil {\n        return nil, err\n    }\n\n    // Setup jsonrpc\n    if err := m.setupJSONRPC(); err != nil {\n        return nil, err\n    }\n\n    // Setup the syncer protocol\n    m.syncer = protocol.NewSyncer(logger, m.blockchain)\n    m.syncer.Register(m.libp2pServer.GetGRPCServer())\n    m.syncer.Start()\n\n    // Register the libp2p GRPC endpoints\n    proto.RegisterHandshakeServer(m.libp2pServer.GetGRPCServer(), &handshakeService{s: m})\n\n    m.libp2pServer.Serve()\n    return m, nil\n}\n')))}u.isMDXComponent=!0},96:function(e,n,r){"use strict";r.d(n,"a",(function(){return p})),r.d(n,"b",(function(){return g}));var t=r(0),i=r.n(t);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=i.a.createContext({}),u=function(e){var n=i.a.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},p=function(e){var n=u(e.components);return i.a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},b=i.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,o=e.originalType,a=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(r),b=t,g=p["".concat(a,".").concat(b)]||p[b]||m[b]||o;return r?i.a.createElement(g,c(c({ref:n},s),{},{components:r})):i.a.createElement(g,c({ref:n},s))}));function g(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=r.length,a=new Array(o);a[0]=b;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:t,a[1]=c;for(var s=2;s<o;s++)a[s]=r[s];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"}}]);