(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{100:function(e,r,n){"use strict";n.d(r,"a",(function(){return p})),n.d(r,"b",(function(){return b}));var t=n(0),i=n.n(t);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,i=function(e,r){if(null==e)return{};var n,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(i[n]=e[n]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),u=function(e){var r=i.a.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):c(c({},r),e)),n},p=function(e){var r=u(e.components);return i.a.createElement(s.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return i.a.createElement(i.a.Fragment,{},r)}},f=i.a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,o=e.originalType,a=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(n),f=t,b=p["".concat(a,".").concat(f)]||p[f]||m[f]||o;return n?i.a.createElement(b,c(c({ref:r},s),{},{components:n})):i.a.createElement(b,c({ref:r},s))}));function b(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var o=n.length,a=new Array(o);a[0]=f;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c.mdxType="string"==typeof e?e:t,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},89:function(e,r,n){"use strict";n.r(r),n.d(r,"frontMatter",(function(){return a})),n.d(r,"metadata",(function(){return c})),n.d(r,"toc",(function(){return l})),n.d(r,"default",(function(){return u}));var t=n(3),i=n(7),o=(n(0),n(100)),a={id:"minimal",title:"Minimal"},c={unversionedId:"reference/modules/minimal",id:"reference/modules/minimal",isDocsHomePage:!1,title:"Minimal",description:"Overview",source:"@site/docs/reference/modules/minimal.md",slug:"/reference/modules/minimal",permalink:"/docs/reference/modules/minimal",editUrl:"https://github.com/0xPolygon/polygon-sdk-docs/docs/reference/modules/minimal.md",version:"current",sidebar:"develop",previous:{title:"Blockchain",permalink:"/docs/reference/modules/blockchain"},next:{title:"Networking",permalink:"/docs/reference/modules/networking"}},l=[{value:"Overview",id:"overview",children:[]},{value:"Startup Magic",id:"startup-magic",children:[]}],s={toc:l};function u(e){var r=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},s,n,{components:r,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"overview"},"Overview"),Object(o.b)("p",null,"As mentioned before, Polygon SDK is a set of different modules, all connected to each other.",Object(o.b)("br",null),"\nThe ",Object(o.b)("strong",{parentName:"p"},"Blockchain")," is connected to the ",Object(o.b)("strong",{parentName:"p"},"State"),", or for example ",Object(o.b)("strong",{parentName:"p"},"Synchronization"),", which pipes new blocks into the ",Object(o.b)("strong",{parentName:"p"},"Blockchain"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Minimal")," is the cornerstone for these inter-connected modules. ",Object(o.b)("br",null),"\nIt acts as a central hub for all the services that run on the Polygon SDK."),Object(o.b)("h2",{id:"startup-magic"},"Startup Magic"),Object(o.b)("p",null,"Among other things, Minimal is responsible for:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Setting up data directories"),Object(o.b)("li",{parentName:"ul"},"Creating a keystore for libp2p communication"),Object(o.b)("li",{parentName:"ul"},"Creating storage"),Object(o.b)("li",{parentName:"ul"},"Setting up consensus"),Object(o.b)("li",{parentName:"ul"},"Setting up the blockchain object with GRPC, JSON RPC and Synchronization")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-go",metastring:'title="minimal/server.go"',title:'"minimal/server.go"'},'func NewServer(logger hclog.Logger, config *Config) (*Server, error) {\n    m := &Server{\n        logger: logger,\n        config: config,\n        chain:      config.Chain,\n        grpcServer: grpc.NewServer(),\n    }\n\n    m.logger.Info("Data dir", "path", config.DataDir)\n\n    // Generate all the paths in the dataDir\n    if err := setupDataDir(config.DataDir, dirPaths); err != nil {\n        return nil, fmt.Errorf("failed to create data directories: %v", err)\n    }\n\n    // Get the private key for the node\n    keystore := keystore.NewLocalKeystore(filepath.Join(config.DataDir, "keystore"))\n    key, err := keystore.Get()\n    if err != nil {\n        return nil, fmt.Errorf("failed to read private key: %v", err)\n    }\n    m.key = key\n\n    storage, err := leveldb.NewLevelDBStorage(filepath.Join(config.DataDir, "blockchain"), logger)\n    if err != nil {\n        return nil, err\n    }\n    m.storage = storage\n\n    // Setup consensus\n    if err := m.setupConsensus(); err != nil {\n        return nil, err\n    }\n\n    stateStorage, err := itrie.NewLevelDBStorage(filepath.Join(m.config.DataDir, "trie"), logger)\n    if err != nil {\n        return nil, err\n    }\n\n    st := itrie.NewState(stateStorage)\n    m.state = st\n\n    executor := state.NewExecutor(config.Chain.Params, st)\n    executor.SetRuntime(precompiled.NewPrecompiled())\n    executor.SetRuntime(evm.NewEVM())\n\n    // Blockchain object\n    m.blockchain, err = blockchain.NewBlockchain(logger, storage, config.Chain, m.consensus, executor)\n    if err != nil {\n        return nil, err\n    }\n\n    executor.GetHash = m.blockchain.GetHashHelper\n\n    // Setup sealer\n    sealerConfig := &sealer.Config{\n        Coinbase: crypto.PubKeyToAddress(&m.key.PublicKey),\n    }\n    m.Sealer = sealer.NewSealer(sealerConfig, logger, m.blockchain, m.consensus, executor)\n    m.Sealer.SetEnabled(m.config.Seal)\n\n    // Setup the libp2p server\n    if err := m.setupLibP2P(); err != nil {\n        return nil, err\n    }\n\n    // Setup the GRPC server\n    if err := m.setupGRPC(); err != nil {\n        return nil, err\n    }\n\n    // Setup jsonrpc\n    if err := m.setupJSONRPC(); err != nil {\n        return nil, err\n    }\n\n    // Setup the syncer protocol\n    m.syncer = protocol.NewSyncer(logger, m.blockchain)\n    m.syncer.Register(m.libp2pServer.GetGRPCServer())\n    m.syncer.Start()\n\n    // Register the libp2p GRPC endpoints\n    proto.RegisterHandshakeServer(m.libp2pServer.GetGRPCServer(), &handshakeService{s: m})\n\n    m.libp2pServer.Serve()\n    return m, nil\n}\n')))}u.isMDXComponent=!0}}]);